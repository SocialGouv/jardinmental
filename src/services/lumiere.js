import {
  getSystemVersion,
  getModel,
  getVersion,
  getBuildNumber,
} from 'react-native-device-info';
import {Platform} from 'react-native';

class LumiereService {
  async init(appId, namespace = '') {
    this.appId = appId;
    this.namespace = namespace;
    this.sessionProperties = {
      userAgent: [
        'RN', // to help back-end parse
        Platform.OS, // android / ios
        getSystemVersion(), // 14.4 / 11.1
        getModel(), // iPhone 11 Pro
        `App v${getVersion()}-b${getBuildNumber()}`, // App v1.2.3-b25
      ].join('/'), // "RN/ios/14.4/iPhone 11 Pro/App v1.2.3-b25"
      env: __DEV__ ? 'development' : 'production',
    };
  }

  userProperties = {};
  addUserProperties = (props = {}) => {
    this.userProperties = {
      ...this.userProperties,
      ...props,
    };
  };

  send = async function (props) {
    if (!this.appId) return;
    if (!props.hasOwnProperty('category'))
      throw new Error('Lumiere: no category is provided');
    if (!props.hasOwnProperty('action'))
      throw new Error('Lumiere: no action is provided');
    const body = {
      timestamp: new Date(), // Required.
      sessionProperties: this.sessionProperties,
      userProperties: this.userProperties || {},
      category: props.category,
      action: props.action,
    };
    // required
    // optional
    if (this.namespace) body.namespace = this.namespace; // String | Optional. Useful when having various sub-apps (snuapp, snuadmin)
    if (this.userId) body.userId = this.userId; // String | Optional, autogenerated by default. Set it if you know your user ID and want to keep it across sessions.
    if (props.hasOwnProperty('userProperties')) {
      // Object | Optional.
      body.userProperties = Object.assign(
        body.userProperties,
        props.userProperties,
      );
    }
    if (props.hasOwnProperty('sessionProperties')) {
      // Object | Optional. Send what you want such as os, resolution, region, etc.
      body.sessionProperties = Object.assign(
        body.sessionProperties,
        props.sessionProperties,
      );
    }
    if (props.hasOwnProperty('value')) body.value = props.value;
    if (__DEV__) return; //console.log({debug: body});

    await fetch(`https://lumiere.cleverapps.io/api/up?appId=${this.appId}`, {
      method: 'POST',
      mode: 'cors',
      credentials: 'include',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify(body),
    });
  };

  sendEvent = (category, action, value) => {
    const props = {category, action};
    if (value) props.value = value;
    this.send(props);
  };

  setEnv = (env) => {
    this.sessionProperties = {
      ...this.sessionProperties,
      env,
    };
  };

  registerUser = (userId) => {
    this.userId = userId;
    this.send({
      action: 'register-user',
      category: 'inscription',
    });
  };
}

const Lumiere = new LumiereService();
export default Lumiere;
