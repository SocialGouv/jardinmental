import React, { useCallback, useContext, useRef, useState } from 'react';
import { View, Text, SafeAreaView, TouchableOpacity, Alert, ScrollView } from 'react-native';
import NavigationButtons from '@/components/onboarding/NavigationButtons';
import CheckInHeader from '@/components/onboarding/CheckInHeader';
import { OnboardingV2ScreenProps } from '../../types';
import { beforeToday, formatDay } from '@/utils/date/helpers';
import { DiaryDataContext } from '@/context/diaryData';
import { INDICATEURS_HUMEUR } from '@/utils/liste_indicateurs.1';
import { TW_COLORS } from '@/utils/constants';
import BannerHeader from '../../BannerHeader';
import { useAnimatedStyle } from 'react-native-reanimated';
import { moodBackgroundColors, moodEmojis } from '@/utils/mood';
import InstructionText from '../../InstructionText';
import { firstLetterUppercase } from '@/utils/string-util';
import { colors } from '@/utils/colors';
import CheckMarkIcon from '@assets/svg/icon/check'
import PlusIcon from '@assets/svg/icon/plus'
import { SafeAreaViewWithOptionalHeader } from '@/scenes/onboarding/ProgressHeader';
import { BottomSheetBackdrop, BottomSheetModal, BottomSheetView } from '@gorhom/bottom-sheet';


type Props = OnboardingV2ScreenProps<'OnboardingCheckInHowDoYouFeelDetails'>;

// @todo this value where generated by chatgpt, see if this is the value we want to set
const SadMoodOptions = [
  'colère', 'anxiété', 'peur', 'accablement', 'honte',
  'dégoût', 'embarras', 'frustration', 'contrariété',
  'jalousie', 'angoisse', 'comportement'
];

const HappyMoodOptions = [
  'enthousiasme',
  'fierté',
  'amour',
  'espoir',
  'sérénité',
  'soulagement',
  'amusement',
  'fascination',
  'gratitude',
  'admiration',
  'exaltation',
  'euphorie',
  'plaisir',
  'contentement',
  'satisfaction',
  'optimisme',
  'tendresse'
]

const NeutralMoodOptions = [
  'curiosité',
  'surprise',
  'intérêt',
  'attente',
  'indifférence',
  'calme',
  'neutralité',
  'acceptation',
  'concentration',
  'réflexion',
  'méditation',
  'observateur',
  'prudence',
  'détachement',
  'tolérance',
  'équanimité'
]

const getMoodOptions = (mood: number): string[] => {
  if (mood < 2) {
    return SadMoodOptions
  } else if (mood > 2) {
    return HappyMoodOptions
  } else {
    return NeutralMoodOptions
  }
}

export const OnboardingCheckInLastMoods: React.FC<Props> = ({ navigation, route }) => {
  const [selectedMoods, setSelectedMoods] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const moodOptions = React.useMemo(() => getMoodOptions(route.params?.mood), [route.params?.mood])
  const [diaryData, addNewEntryToDiaryData] = useContext(DiaryDataContext);

  const toggleMood = (mood: string) => {
    setSelectedMoods(prev => {
      if (prev.includes(mood)) {
        return prev.filter(m => m !== mood);
      } else {
        return [...prev, mood];
      }
    });
  };

  const handleComplete = async () => {
    setLoading(true);
    try {
      const date = formatDay(beforeToday(0))
      const prev = diaryData[date] || {}
      const key = INDICATEURS_HUMEUR.name
      const updatedAnswers = {
        ...prev,
        [key]: { ...prev[key], userComment: selectedMoods.join(', ') },

      }
      console.log({
        date,
        answers: updatedAnswers
      })
      addNewEntryToDiaryData({
        date,
        answers: updatedAnswers
      });

      navigation.navigate('OnboardingCheckInMoodSummary', {
        mood: route.params?.mood,
        selectedMoods: selectedMoods,
      })
      console.log(route.params?.mood, 'route.params?.mood')
    } catch (error) {
      console.error('Error completing onboarding:', error);
      Alert.alert('Erreur', 'Une erreur est survenue. Veuillez réessayer.');
    } finally {
      setLoading(false);
    }
  };

  const handlePrevious = () => {
    navigation.goBack();
  };

  const handleSkip = () => {
    handleComplete();
  };

  const renderMoodSelector = () => (
    <View className="mb-6 mt-6">
      <View className="flex-row flex-wrap gap-x-3 gap-y-3">
        {moodOptions.map((mood, index) => {
          const isSelected = selectedMoods.includes(mood);
          return (
            <TouchableOpacity
              key={index}
              onPress={() => toggleMood(mood)}
              className="px-4 py-3 rounded-lg"
              style={{
                borderWidth: 2,
                position: 'relative',
                borderColor: 'transparent',
              }}
            >
              <View className="flex-row items-center justify-center">
                <Text
                  className="text-center font-medium text-primary mr-1"
                >
                  {firstLetterUppercase(mood)}
                </Text>
                {isSelected ? <CheckMarkIcon /> : <PlusIcon />}
              </View>
              <View style={{
                position: 'absolute',
                top: 0,
                bottom: 0,
                left: 0,
                right: 0,
                borderWidth: isSelected ? 2 : 1,
                backgroundColor: isSelected ? colors.LIGHT_BLUE_TRANS_02 : TW_COLORS.WHITE,
                borderColor: TW_COLORS.PRIMARY,
                borderRadius: 8, // match rounded-lg
                zIndex: -1, // optional if you want it behind content
              }}></View>
            </TouchableOpacity>
          );
        })}
      </View>
    </View>
  );

  const animatedStatusBarColor = useAnimatedStyle(() => {
    return {
      backgroundColor: route.params?.mood !== null ? moodBackgroundColors[route.params?.mood] : TW_COLORS.WHITE,
    };
  })

  const animatedTextColor = useAnimatedStyle(() => {
    return {
      backgroundColor: 'transparent',
      color: TW_COLORS.PRIMARY
    };
  })


  const bottomSheetRef = useRef<BottomSheetModal>(null);

  const handleSheetChanges = useCallback((index: number) => {
    console.log('handleSheetChanges', index);
  }, []);

  const renderBackdrop = useCallback(
    props => (<BottomSheetBackdrop {...props}
      opacity={0.5}
      enableTouchThrough={false}
      appearsOnIndex={0}
      disappearsOnIndex={-1}
      style={[{ backgroundColor: 'rgba(0, 0, 0, 1)' }]} />),
    []
  );

  return (
    <SafeAreaViewWithOptionalHeader className="flex-1 bg-white">
      {/* <CheckInHeader
        title="Observation du jour"
        onPrevious={handlePrevious}
        onSkip={handleSkip}
        showPrevious={true}
        showSkip={true}
      />
      
      <View className="flex-1 justify-center items-center px-8">
        <Text 
          className="text-lg font-bold text-center mb-8"
          style={{ color: TW_COLORS.TEXT_PRIMARY }}
        >
          Y-a-t-il une émotion, un état ou un comportement qui a pris un peu de place aujourd'hui ?
        </Text>
        
        {renderMoodSelector()}
        
        <Text 
          className="text-sm text-center mt-4 px-4"
          style={{ color: TW_COLORS.TEXT_SECONDARY }}
        >
          Vous pouvez sélectionner plusieurs options
        </Text>
      </View> */}
      <BannerHeader
        animatedStatusBarColor={animatedStatusBarColor}
        animatedTextColor={animatedTextColor}
        headerTitle='Observation du jour'
        title={`Y-a-t-il une émotion, un état ou un comportement qui a pris un peu de place aujourd'hui ?`}
        leftAction={() => bottomSheetRef.current?.present()}
        leftComponent={<View><Text>Aide (?)</Text></View>}
      // handlePrevious={handlePrevious}
      // handleSkip={handleSkip}
      >
        {route.params?.mood !== null && <View className='justify-center items-center mt-4'>
          {moodEmojis[route.params?.mood]?.icon}
        </View>}
      </BannerHeader>
      <ScrollView className="flex-1 p-6" contentContainerStyle={{ paddingBottom: 100 }}>
        <InstructionText>
          Sélectionnez votre ressenti du moment
        </InstructionText>
        {renderMoodSelector()}
      </ScrollView>
      <NavigationButtons
        onNext={handleComplete}
        absolute={true}
        showPrevious={false}
        onPrevious={handlePrevious}
        loading={loading}
        nextText="Renseigner mes émotions"
      />
      <BottomSheetModal
        ref={bottomSheetRef}
        backdropComponent={renderBackdrop}
        onChange={handleSheetChanges}
      >
        <BottomSheetView>
          <View className="flex-1 bg-white p-4">
            <Text className="text-lg font-semibold mb-4" style={{ color: TW_COLORS.TEXT_PRIMARY }}>
              Comment observer une émotion?
            </Text>
            <Text className="text-base mb-4 leading-6" style={{ color: TW_COLORS.TEXT_SECONDARY }}>
              Pensez à son intensité aujourd’hui, sa durée ou son impact sur vous.</Text>
            <Text className="text-base mb-4 leading-6" style={{ color: TW_COLORS.TEXT_SECONDARY }}>
              Il n’y a pas de bonne réponse — l’essentiel, c’est d’en prendre conscience au fil du temps.</Text>
          </View>
        </BottomSheetView>
      </BottomSheetModal>
    </SafeAreaViewWithOptionalHeader>
  );
};

export default OnboardingCheckInLastMoods;
